# This function validates that a specific top-level attribute of a
# specific resource is within a given list of allowed values for all
# instances of the resource in all modules.
# It also validates that the attribute exists in each instance.

validate_top_level_resource_attribute_in_list = func(resource_type, attribute, allowed_values) {

  # Arguments
  ## resource_type: the type of resource to validate
  ## attribute: a top-level attribute of the resource
  ## allowed_values is the list of allowed values for the attribute

  # Get all resources of the specified type
  list_of_resource_maps = find_resources_from_plan(resource_type)

  # Extract the maps from the main list
  for list_of_resource_maps as resource_map {
    # For each map, get the name and map of resources
    for resource_map as name, resources {
      # Get each resource instance
      for resources as _, r {

        # Skip resources that are being destroyed
        if length(r.diff) == 0 {
          print("Skipping resource", name, "that is being destroyed.")
          continue
        }

        # Validate that the attribute is not computed
        if r.diff[attribute].computed else false {
          print("resource", name, "has a computed attribute:", attribute)
          return false
        }

        # Validate that the attribute exists
        if (length(r.applied[attribute]) else 0) > 0 {
          applied_value = r.applied[attribute]
        } else {
          print("resource", name, "is missing attribute:", attribute)
          return false
        }

        # Check if applied_value is in the allowed_values list
        # Convert undefined applied_value to null to prevent error
        if applied_value not in allowed_values {
          # Print name of first violator along with
          # attribute, disallowed value, and the list
          print("resource", name,
            "has attribute", attribute,
            "with value", applied_value,
            "that is not in the list:", allowed_values)
          return false
        }
      }
    }
  }

  # Indicate that there were no violators and return true
  print("No violators of type", resource_type, "for attribute",
    attribute, "against the list:", allowed_values)
  return true
}
