# This function validates that a specific (possibly nested)
# attribute of a specific resource is within a given list of allowed
# values for all instances of the resource in all modules.
# It also validates that the attribute exists in each instance.

validate_nested_resource_attribute_in_list = func(resource_type, attribute, allowed_values) {

  # Arguments:
  ## resource_type: the type of resource to validate
  ## attribute: a string representing a nested attribute
  ### of the resource represented with a chain of nested
  ### attributes separated by ".". Examples are "tags.Name" and
  ### "storage_image_reference.0.publisher". If the plan shows a long,
  ### numeric ID for an index, replace it with 0.
  ## allowed_values: the list of allowed values for the attribute

  # Get all resources of the specified type
  list_of_resource_maps = find_resources_from_plan(resource_type)

  # Extract the maps from the main list
  for list_of_resource_maps as resource_map {
    # For each map, get the name and map of resources
    for resource_map as name, resources {
      # Get each resource instance
      for resources as _, r {

        # Call the evaluate_attribute function
        applied_value = evaluate_attribute(r.applied, attribute)

        # Check if evaluate_attribute returned undefined
        if applied_value is "undefined" {
          print("resource", name,
            "has attribute", attribute,
            "that is missing or computed")
          return false
        }

        # Check if applied_value is in the allowed_values list
        # Convert undefined applied_value to null
        if applied_value not in allowed_values {
          # Print name of first violator along with
          # attribute, disallowed value, and the list
          print("resource", name,
            "has attribute", attribute,
            "with value", applied_value,
            "that is not in the list:", allowed_values)
          return false
        }
      }
    }
  }

  # Indicate that there were no violators and return true
  print("No violators of type", resource_type, "for attribute",
    attribute, "against the list:", allowed_values)
  return true

}
