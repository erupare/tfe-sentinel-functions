# This function validates that a specific top-level attribute
# that is a map or list contains all members of a given list
# for all instances of a specific resource in all modules

validate_top_level_resource_attribute_contains_list = func(resource_type, attribute, required_values) {

  # Arguments
  ## resource_type: the type of resource to validate
  ## attribute: a top-level attribute of the resource that is a map or list
  ## required_values: a list of required values for the attribute

  # Get all resources of the specified type
  list_of_resource_maps = find_resources_from_plan(resource_type)

  # Extract the maps from the main list
  for list_of_resource_maps as resource_map {
    # For each map, get the name and map of resources
    for resource_map as name, resources {
      # Get each resource instance
      for resources as _, r {

        # Skip resources that are being destroyed
        if length(r.diff) == 0 {
          print("Skipping resource", name, "that is being destroyed.")
          continue
        }

        # Validate that the attribute is not computed.
        # We check "attribute.%" and "attribute.#" because an
        # attribute of type map or list won't show up in the diff
        if (r.diff[attribute + ".%"].computed else false) or
        (r.diff[attribute + ".#"].computed else false) {
          print("resource", name, "has a computed attribute:", attribute)
          return false
        }

        # Validate that the attribute exists
        if (length(r.applied[attribute]) else 0) > 0 {
          applied_value = r.applied[attribute]
        } else {
          print("resource", name, "is missing attribute:", attribute)
          return false
        }

        # Get each member of the required_values list
        for required_values as rv {
          # Test that the attribute contains the member of the list
          if applied_value not contains rv {
            # Print name of first violator along with
            # attribute, required value, and the list
            print("resource", name,
              "has attribute", attribute,
              "that is missing required value", rv,
              "from the list:", required_values)
            return false
          }
        }
      }
    }
  }

  print("No violators of type", resource_type, "for attribute",
    attribute, "against the list:", required_values)
  return true
}
