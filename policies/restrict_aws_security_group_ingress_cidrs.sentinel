# This policy restricts all instances of the aws_security_group
# resource in the plan to only allow CIDRs in the repeated, nested
# attribute `ingress.*.cidr_blocks.*` to come from the allowed_cidrs
# list. Note that `*` represents indices that can be repeated.

# In an actual plan, the attribute would have values like
# `ingress.37077896.cidr_blocks.0` and
# `ingress.4073014683.cidr_blocks.1`.

# It uses the following functions:
## validate_repeated_nested_resource_attribute_in_list
## find_resources_from_plan
## evaluate_repeated_attribute

### imports ####
import "tfplan"
import "strings"
import "types"

### validate_repeated_nested_resource_attribute_in_list ###
# This function validates that a specific repeated
# attribute of a specific resource is within a given list of allowed
# values for all instances of the resource in all modules.
# It also validates that the attribute exists in each instance.

validate_repeated_nested_resource_attribute_in_list = func(resource_type, attribute, allowed_values) {

  # Arguments:
  ## resource_type: the type of resource to validate
  ## attribute: a string representing a nested attribute
  ### of the resource represented by a chain of nested
  ### attributes separated by "." such as "ingress.*.cidr_blocks.*"
  ### in which repeated indices are represented by "*"
  ## allowed_values: the list of allowed values for the attribute

  # Get all resources of the specified type
  list_of_resource_maps = find_resources_from_plan(resource_type)

  # Extract the maps from the main list
  for list_of_resource_maps as resource_map {
    # For each map, get the name and map of resources
    for resource_map as name, resources {
      # Get each resource instance
      for resources as _, r {

        # Skip resources that are being destroyed
        if length(r.diff) == 0 {
          print("Skipping resource", name, "that is being destroyed.")
          continue
        }

        # Call the evaluate_repeated_attribute function
        applied_values = evaluate_repeated_attribute(r.applied, attribute)

        # Check if evaluate_repeated_attribute returned empty list
        if (length(applied_values) else 0) == 0 {
          print("resource", name,
            "has attribute", attribute,
            "that is missing or computed")
          return false
        }

        # Check if all items in applied_values are in the
        # allowed_values list
        for applied_values as av {
          if av not in allowed_values {
            # Print name of first violator along with
            # attribute, disallowed value, and the list
            print("resource", name,
              "has occurence of attribute", attribute,
              "with value", av,
              "that is not in the list:", allowed_values)
            return false
          }
        }
      }
    }
  }

  # Indicate that there were no violators and return true
  print("No violators of type", resource_type, "for attribute",
    attribute, "against the list:", allowed_values)
  return true

}

### find_resources_from_plan ###
# Get all instances of a specific resource in the plan
# from all modules

find_resources_from_plan = func(r) {

  # Arguments
  ## r: the type of resource to find

  # Start with an empty map
  resources = []

  # Iterate over all modules in the tfplan import
  for tfplan.module_paths as path {
    # Append all resources of the specified type
    # If a module does not have any resources of the
    # specified type in the plan, we append the empty map, {}.
    append(resources, (tfplan.module(path).resources[r] else {}))
  }

  return resources
}

### evaluate_repeated_attribute ###
# This function evaluates a repeated attribute from a resource.
# It can do this for attributes deep inside the resource
# since it calls itself recursively.

evaluate_repeated_attribute = func(r, attribute) {

  # Arguments:
  ## r: an instance of a resource to validate that should be given in the
  ### initial call in the form "r.applied" or "r.attr" depending on whether
  ### r is derived from the plan or the state.
  ## attribute: a string representing a nested repeated attribute of the
  ### resource. It is represented by a chain of nested attributes separated
  ### by "." such as `ingress.*.cidr_blocks.*` in which indices that could
  ### be repeated are represented by `*`.


  # Declare attribute_values list
  attribute_values = []

  # Split the attribute into a list, using "." as the separator
  attributes = strings.split(attribute, ".")

  # Process repeated index
  if attributes[0] is "*" {
    # Make sure r is of type list
    if types.type_of(r) is not "list" {
      return attribute_values
    } else {
      # Process each instance of the index
      for r as index, new_r {

        # Validate that new_r exists
        # If not, stop processing for this index
        if (length(new_r) else 0) == 0 {
          break
        }

        # Process based on length of attributes
        # being greater than or equal to 1
        if length(attributes) > 1 {

          # Strip first element from attributes
          new_attributes = attributes[1:length(attributes)]
          new_attribute = strings.join(new_attributes, ".")

          # Make recursive call
          attribute_values += evaluate_repeated_attribute(new_r, new_attribute)

        } else {
          # We reached the end of the attribute and can just
          # add the value of the attribute
          attribute_values += [new_r]
        }
      }

      # Done with attribute component that is index
      return attribute_values
    }
  } else {
    # Process non-repeated attribute component

    # Append the current attribute to the resource instance
    new_r = r[attributes[0]]

    # Validate that new_r exists before processing more
    if (length(new_r) else 0) == 0 {
      return attribute_values
    }

    # Process based on length of attributes
    # being greater than or equal to 1
    if length(attributes) > 1 {

      # Strip first element from attributes
      new_attributes = attributes[1:length(attributes)]
      new_attribute = strings.join(new_attributes, ".")

      # Make recursive call
      attribute_values += evaluate_repeated_attribute(new_r, new_attribute)

    } else {
      # We reached the end of the attribute and can just
      # add the value of the attribute
      attribute_values += [new_r]
    }

    # Done with attribute component that is not index
    return attribute_values
  }
}

### A list of allowed CIDRs ###
allowed_cidrs = [
  "172.16.10.0/24",
  "172.16.80.0/24",
]

### Rule to restrict CIDRs of security groups ###
validate_ingress_cidrs = rule {
  validate_repeated_nested_resource_attribute_in_list(
    "aws_security_group",
    "ingress.*.cidr_blocks.*",
    allowed_cidrs)
}

### main rule ###
main = rule {
  (validate_ingress_cidrs) else true
}
