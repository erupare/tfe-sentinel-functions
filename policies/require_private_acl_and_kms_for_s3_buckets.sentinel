# This policy restricts all instances of the aws_s3_bucket resource
# in the plan to use an acl in the allowed_acls list and a KMS
# encryption algorithm in the allowed_algorithms list.

# It uses the following functions:
## validate_nested_resource_attribute_in_list
## find_resources_from_plan
## evaluate_attribute

### imports ###
import "tfplan"
import "strings"
import "types"

### validate_nested_resource_attribute_in_list ###
# This function validates that a specific (possibly nested)
# attribute of a specific resource is within a given list of allowed
# values for all instances of the resource in all modules.
# It also validates that the attribute exists in each instance.

validate_nested_resource_attribute_in_list = func(resource_type, attribute, allowed_values) {

  # Arguments:
  ## resource_type: the type of resource to validate
  ## attribute: a string representing a nested attribute
  ### of the resource represented with a chain of nested
  ### attributes separated by ".". Examples are "tags.Name" and
  ### "storage_image_reference.0.publisher". If the plan shows a long,
  ### numeric ID for an index, replace it with 0.
  ## allowed_values: the list of allowed values for the attribute

  # Get all resources of the specified type
  list_of_resource_maps = find_resources_from_plan(resource_type)

  # Extract the maps from the main list
  for list_of_resource_maps as resource_map {
    # For each map, get the name and map of resources
    for resource_map as name, resources {
      # Get each resource instance
      for resources as _, r {

        # Skip resources that are being destroyed
        if length(r.diff) == 0 {
          print("Skipping resource", name, "that is being destroyed.")
          continue
        }

        # Validate that the attribute is not computed
        if r.diff[attribute].computed else false {
          print("resource", name, "has a computed attribute:", attribute)
          return false
        }

        # Call the evaluate_attribute function
        applied_value = evaluate_attribute(r.applied, attribute)

        # Check if evaluate_attribute returned undefined
        if types.type_of(applied_value) is "string" and
          applied_value is "undefined" {
          print("resource", name, "has a missing attribute", attribute)
          return false
        }

        # Check if applied_value is in the allowed_values list
        # Convert undefined applied_value to null
        if applied_value not in allowed_values {
          # Print name of first violator along with
          # attribute, disallowed value, and the list
          print("resource", name,
            "has attribute", attribute,
            "with value", applied_value,
            "that is not in the list:", allowed_values)
          return false
        }
      }
    }
  }

  # Indicate that there were no violators and return true
  print("No violators of type", resource_type, "for attribute",
    attribute, "against the list:", allowed_values)
  return true

}
### find_resources_from_plan ###
# This function gets all instances of a specific resource
# from all modules using the tfplan import

find_resources_from_plan = func(r) {

  # Arguments
  ## r: the type of resource to find

  # Start with an empty map
  resources = []

  # Iterate over all modules in the tfplan import
  for tfplan.module_paths as path {
    # Append all resources of the specified type
    # If a module does not have any resources of the
    # specified type in the plan, we append the empty map, {}.
    append(resources, (tfplan.module(path).resources[r] else {}))
  }

  return resources
}

### evaluate_attribute ###
# This function evaluates an attribute from a resource.
# It can do this for attributes deep inside the resource
# since it calls itself recursively.

evaluate_attribute = func(r, attribute) {

  # Arguments:
  ## r: an instance of a resource to validate that should be given in the
  ### initial call in the form "r.applied" or "r.attr" depending on whether
  ### r is derived from the plan or the state.
  ## attribute: a string representing the attribute to be evaluated
  ### If the attribute is nested, only use "." between its components
  ### even for indices of lists and blocks. Indices represented by long IDs
  ### should be converted to indices that start with 0.


  # Split the attribute into a list, using "." as the separator
  attributes = strings.split(attribute, ".")

  # Convert numeric strings to integers for indices
  if attributes[0] matches "^[0-9]+$" {
    a = int(attributes[0])
    # Make sure r is of type list
    if types.type_of(r) is not "list" {
      return "undefined"
    }
  } else {
    a = attributes[0]
  }

  # Append the current attribute to the resource instance
  new_r = r[a]

  # Validate that new_r exists
  if (length(new_r) else 0) == 0 {
    return "undefined"
  }

  # Process based on length of attributes
  # being greater than or equal to 1
  if length(attributes) > 1 {

    # Strip first element from attributes
    attributes = attributes[1:length(attributes)]
    attribute = strings.join(attributes, ".")

    # Make recursive call
    return evaluate_attribute(new_r, attribute)
  } else {

    # We reached the end of the attribute and can stop the
    # recursive calls and return the value of the attribute
    return new_r

  }

}

### List of allowed S3 ACLs ###
allowed_acls = [
  "private",
]

### Rule to restrict S3 bucket ACLs ###
acl_allowed = rule {
  validate_nested_resource_attribute_in_list(
    "aws_s3_bucket",
    "acl",
    allowed_acls)
}

### List of allowed algorithms for KMS ###
allowed_algorithms = [
  "aws:kms",
]

### Rule to require server-side encryption ###
require_encryption = rule {
  validate_nested_resource_attribute_in_list(
    "aws_s3_bucket", "server_side_encryption_configuration.0.rule.0.apply_server_side_encryption_by_default.0.sse_algorithm",
    allowed_algorithms)
}

### main rule that requires other rules to be true ###
main = rule {
  (acl_allowed and require_encryption) else true
}
